#!/usr/bin/env python
# Launch a command (i.e. argv[1]) x minutes before (e.g. argv[2] = -30) or after sunrise (e.g. argv[2] = +20).
import subprocess
import re
import os
import sys
from subprocess import call
import datetime as dt
import time
import ephem

def check_int(s):
    if s[0] in ('-', '+'):
        return s[1:].isdigit()
    return s.isdigit()

def job():
    subprocess.call(sys.argv[1], shell=True)

# TODO BUG: will hang if no fix - add timeout
def find_location():
    # TODO dev in config file
    proc = subprocess.Popen(["gpscat", "/dev/ttyAMA0"], stdout=subprocess.PIPE)
    for line in proc.stdout:
        m = re.search("^\$GPRMC,[0-9]+\.[0-9]+,A,([\.0-9]+),([NS]),([\.0-9]+),([EW]),", line)
        if(m):
            proc.terminate()
            lat, lon = float(m.group(1)), float(m.group(3))
            ns, ew = m.group(2), m.group(4)
            if (ns == 'S'): lat *= -1
            if (ew == 'W'): lon *= -1
            flat = "%s" % (lat / 100)
            flon = "%s" % (lon / 100)
            return(flat, flon)

def to_timestamp(date, epoch=dt.datetime(1970,1,1)):
    td = date - epoch
    return td.total_seconds()
 
if __name__ == "__main__":
    # TODO no time to mess with this Device busy' - raspi is single user
    if not os.geteuid() == 0:
        exit("Must be run as root!");

    # TODO add help msg
    if len(sys.argv) < 4:
        exit('Usage: %s <command> <offset (e.g. -30)> <horizon angle (e.g. -6)> [-t]' % sys.argv[0])

    offset = 0
    if sys.argv[2]:
        if check_int(sys.argv[2]):
            offset = sys.argv[2]
        else:
            print("Error: offset argument must be a positive or negative number")
            exit(1)

    angle = 0
    if sys.argv[3]:
        if check_int(sys.argv[3]):
            angle = sys.argv[3]
        else:
            print("Error: horizon angle argument must be a positive or negative number")
            exit(1)
      
    sun = ephem.Sun()
    home = ephem.Observer()

    # get GPS coordinates and time based on GPS PPS
    home.lat, home.lon = find_location()
    home.date = ephem.date(dt.datetime.utcnow())
    home.horizon = angle

    # find sunrise
    sun.compute(home)
    sunrise = home.next_rising(sun)
    sunrise_time = ephem.localtime(sunrise)

    # offset in minutes, e.g. -30 means 30 minutes before sunrise
    exec_time = sunrise_time + dt.timedelta(minutes=int(sys.argv[2]))

    sleep = to_timestamp(exec_time) - to_timestamp(dt.datetime.now())
    
    if len(sys.argv) > 4: 
        if sys.argv[4] == '-t':
            print("Next sunrise at %s - sleeping for %s seconds" % (exec_time, sleep))
            exit(0)
   
    time.sleep(sleep)
    
    job()
